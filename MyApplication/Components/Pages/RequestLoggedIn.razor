@page "/request-logged-in"
@using MyApplication.Models
@using MyApplication.Services
@inject RequestService RequestService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AuthService AuthService
@layout MyApplication.Components.Layout.FullPageLayout

<PageTitle>‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏µ‡∏¢</PageTitle>

@if (!AuthService.IsAuthenticated)
{
    Navigation.NavigateTo("/request");
    return;
}

<MudContainer MaxWidth="MaxWidth.Medium" Class="pt-4">
    <MudPaper Elevation="3" Class="pa-8">
        <MudStack Spacing="4" AlignItems="AlignItems.Center">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Size="Size.Large" Color="Color.Secondary" />
                <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Secondary">
                    üíå ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏µ‡∏¢
                </MudText>
            </MudStack>

            <MudAlert Severity="Severity.Success" Icon="@Icons.Material.Filled.CheckCircle">
                ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö <strong>@AuthService.CurrentUser?.DisplayName</strong>! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ
            </MudAlert>

            <EditForm Model="@requestModel" OnValidSubmit="@HandleSubmit" style="width: 100%;">
                <DataAnnotationsValidator />
                <MudStack Spacing="3">
                    <MudTextField @bind-Value="requestModel.Name"
                                  Label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤"
                                  Variant="Variant.Outlined"
                                  For="@(() => requestModel.Name)"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Person" />

                    <MudStack Row="true" Spacing="2">
                        <MudTextField @bind-Value="requestModel.Date"
                                      Label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ (dd/mm/yyyy)"
                                      Variant="Variant.Outlined"
                                      For="@(() => requestModel.Date)"
                                      Placeholder="‡πÄ‡∏ä‡πà‡∏ô 25/12/2024"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.CalendarToday" />

                        <MudTextField @bind-Value="requestModel.Time"
                                      Label="‡πÄ‡∏ß‡∏•‡∏≤ (hh:mm)"
                                      Variant="Variant.Outlined"
                                      For="@(() => requestModel.Time)"
                                      Placeholder="‡πÄ‡∏ä‡πà‡∏ô 18:30"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.AccessTime" />
                    </MudStack>

                    <MudTextField @bind-Value="requestModel.Place"
                                  Label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"
                                  Variant="Variant.Outlined"
                                  For="@(() => requestModel.Place)"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.LocationOn" />

                    <MudTextField @bind-Value="requestModel.Reason"
                                  Label="‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"
                                  Variant="Variant.Outlined"
                                  Lines="3"
                                  For="@(() => requestModel.Reason)"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Edit" />

                    <ValidationSummary />

                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Warning"
                               Size="Size.Large"
                               FullWidth="true"
                               StartIcon="@Icons.Material.Filled.Send"
                               Disabled="@isLoading">
                        @if (isLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" />
                            <MudSpacer />
                        }
                        ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠
                    </MudButton>

                    <MudText Typo="Typo.caption" Align="Align.Center" Color="Color.Error">
                        ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏ä‡∏∞‡∏ï‡∏≤‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‚ö°
                    </MudText>
                </MudStack>
            </EditForm>

            @if (showSuccess)
            {
                <MudAlert Severity="Severity.Success" ShowCloseIcon="true" CloseIconClicked="@(() => showSuccess = false)">
                    <MudText Typo="Typo.body1">
                        üéâ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!<br/>
                        ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏µ‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö... üôè
                    </MudText>
                </MudAlert>
            }

            <MudDivider />

            <MudStack Row="true" Spacing="2" Justify="Justify.Center">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Dashboard"
                           Href="/dashboard">
                    ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠
                </MudButton>
            </MudStack>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private RequestModel requestModel = new();
    private bool isLoading = false;
    private bool showSuccess = false;

    protected override Task OnInitializedAsync()
    {
        if (!AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/request");
            return Task.CompletedTask;
        }

        // Pre-fill user name if logged in
        if (AuthService.CurrentUser != null)
        {
            requestModel.Name = AuthService.CurrentUser.DisplayName;
        }
        return Task.CompletedTask;
    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        try
        {
            var success = await RequestService.AddRequestAsync(requestModel);
            if (success)
            {
                showSuccess = true;
                requestModel = new RequestModel();
                // Pre-fill user name again
                if (AuthService.CurrentUser != null)
                {
                    requestModel.Name = AuthService.CurrentUser.DisplayName;
                }
                
                Snackbar.Add("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ", Severity.Success);
                
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ üòû", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
}