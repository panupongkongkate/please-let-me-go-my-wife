@page "/request"
@using MyApplication.Models
@using MyApplication.Services
@inject RequestService RequestService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AuthService AuthService
@layout MyApplication.Components.Layout.FullPageLayout
<PageTitle>‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏µ‡∏¢</PageTitle>

@if (AuthService.IsAuthenticated)
{
    Navigation.NavigateTo("/request-logged-in");
    return;
}

<MudContainer MaxWidth="MaxWidth.Medium" Class="pt-4">
        <MudPaper Elevation="3" Class="pa-8" Style="background: linear-gradient(135deg, #ffb3ba 0%, #ffdfba 100%);">
            <MudStack Spacing="4" AlignItems="AlignItems.Center">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudIcon Icon="@Icons.Material.Filled.FavoriteBorder" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Secondary">
                        üíå ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏µ‡∏¢
                    </MudText>
                </MudStack>

                <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Info">
                    ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                </MudAlert>

                <EditForm Model="@requestModel" OnValidSubmit="@HandleSubmit" style="width: 100%;">
                    <DataAnnotationsValidator />
                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="requestModel.Name"
                                      Label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤"
                                      Variant="Variant.Outlined"
                                      For="@(() => requestModel.Name)"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Person" />

                        <MudStack Row="true" Spacing="2">
                            <MudTextField @bind-Value="requestModel.Date"
                                          Label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ (dd/mm/yyyy)"
                                          Variant="Variant.Outlined"
                                          For="@(() => requestModel.Date)"
                                          Placeholder="‡πÄ‡∏ä‡πà‡∏ô 25/12/2024"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.CalendarToday" />

                            <MudTextField @bind-Value="requestModel.Time"
                                          Label="‡πÄ‡∏ß‡∏•‡∏≤ (hh:mm)"
                                          Variant="Variant.Outlined"
                                          For="@(() => requestModel.Time)"
                                          Placeholder="‡πÄ‡∏ä‡πà‡∏ô 18:30"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.AccessTime" />
                        </MudStack>

                        <MudTextField @bind-Value="requestModel.Place"
                                      Label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"
                                      Variant="Variant.Outlined"
                                      For="@(() => requestModel.Place)"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.LocationOn" />

                        <MudTextField @bind-Value="requestModel.Reason"
                                      Label="‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"
                                      Variant="Variant.Outlined"
                                      Lines="3"
                                      For="@(() => requestModel.Reason)"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Edit" />

                        <ValidationSummary />

                        <MudButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Warning"
                                   Size="Size.Large"
                                   FullWidth="true"
                                   StartIcon="@Icons.Material.Filled.Send"
                                   Disabled="@isLoading">
                            @if (isLoading)
                            {
                                <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" />
                                <MudSpacer />
                            }
                            ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠
                        </MudButton>

                        <MudText Typo="Typo.caption" Align="Align.Center" Color="Color.Error">
                            ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏ä‡∏∞‡∏ï‡∏≤‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‚ö°
                        </MudText>
                    </MudStack>
                </EditForm>

                @if (showSuccess)
                {
                    <MudAlert Severity="Severity.Success" ShowCloseIcon="true" CloseIconClicked="@(() => showSuccess = false)">
                        <MudText Typo="Typo.body1">
                            üéâ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!<br/>
                            ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏µ‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö... üôè
                        </MudText>
                    </MudAlert>
                }

                <MudDivider />

                <MudStack Row="true" Spacing="2" Justify="Justify.Center">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Dashboard"
                               Href="/dashboard">
                        ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠
                    </MudButton>

                    <MudButton Variant="Variant.Text"
                               Color="Color.Info"
                               StartIcon="@Icons.Material.Filled.Login"
                               Href="/login">
                        ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
</MudContainer>

@code {
    private RequestModel requestModel = new();
    private bool isLoading = false;
    private bool showSuccess = false;

    private async Task HandleSubmit()
    {
        isLoading = true;
        try
        {
            var success = await RequestService.AddRequestAsync(requestModel);
            if (success)
            {
                showSuccess = true;
                requestModel = new RequestModel();
                
                Snackbar.Add("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ", Severity.Success);
                
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ üòû", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
}