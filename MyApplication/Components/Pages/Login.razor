@page "/login"
@using MyApplication.Models
@using MyApplication.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@layout Layout.FullPageLayout

<PageTitle>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö - ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏µ‡∏¢</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pt-16">
    <MudPaper Elevation="3" Class="pa-8" Style="background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);">
        <MudStack Spacing="4" AlignItems="AlignItems.Center">
            <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Secondary">
                üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏µ‡∏¢
            </MudText>

            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                <MudStack Spacing="3">
                    <MudTextField @bind-Value="loginModel.Username"
                                  Label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                                  Variant="Variant.Outlined"
                                  For="@(() => loginModel.Username)"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Person" />

                    <MudTextField @bind-Value="loginModel.Password"
                                  Label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                                  InputType="InputType.Password"
                                  Variant="Variant.Outlined"
                                  For="@(() => loginModel.Password)"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Key" />

                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               FullWidth="true"
                               Disabled="@isLoading">
                        @if (isLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" />
                            <MudSpacer />
                        }
                        ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                    </MudButton>
                </MudStack>
            </EditForm>

            <MudDivider />

            <MudPaper Class="pa-4" Style="background-color: rgba(255,255,255,0.9);">
                <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Info">
                    üìù ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:
                </MudText>
                <MudText Typo="Typo.body2">
                    Admin (‡πÄ‡∏°‡∏µ‡∏¢): username = "‡πÄ‡∏°‡∏µ‡∏¢", password = "admin"<br/>
                    User (‡∏™‡∏≤‡∏°‡∏µ): username = "‡∏™‡∏≤‡∏°‡∏µ", password = "123456"<br/>
                    Guest: username = "guest", password = "guest"
                </MudText>
            </MudPaper>

            <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Info">
                ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Demo: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!
            </MudText>

            <MudStack Row="true" Spacing="2" Justify="Justify.Center">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Warning"
                           StartIcon="@Icons.Material.Filled.AdminPanelSettings"
                           OnClick="@(() => HandleQuickLogin("admin"))"
                           Disabled="@isLoading">
                    üëë Login Role Admin
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Info"
                           StartIcon="@Icons.Material.Filled.Person"
                           OnClick="@(() => HandleQuickLogin("user"))"
                           Disabled="@isLoading">
                    üë§ Login Role User
                </MudButton>
            </MudStack>

            <MudText Typo="Typo.caption" Align="Align.Center" Color="Color.Error">
                ‡∏´‡∏≤‡∏Å‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô... ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏Ç‡∏≠‡πÄ‡∏°‡∏µ‡∏¢‡πÉ‡∏´‡∏°‡πà üòÖ
            </MudText>

            <MudDivider />

            <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Info">
                ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </MudText>

            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       Size="Size.Large"
                       FullWidth="true"
                       StartIcon="@Icons.Material.Filled.Send"
                       Href="/request">
                üíå ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏µ‡∏¢
            </MudButton>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;

    protected override Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/dashboard");
        }
        return Task.CompletedTask;
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        try
        {
            var success = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
            if (success)
            {
                Snackbar.Add($"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {AuthService.CurrentUser?.DisplayName}! üéâ", Severity.Success);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                Snackbar.Add("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á üòÖ", Severity.Error);
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleQuickLogin(string role)
    {
        isLoading = true;
        try
        {
            var success = await AuthService.QuickLoginAsync(role);
            if (success)
            {
                var roleText = role == "admin" ? "‡πÄ‡∏°‡∏µ‡∏¢" : "‡∏™‡∏≤‡∏°‡∏µ";
                Snackbar.Add($"‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞ {roleText} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üëë", Severity.Success);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                Snackbar.Add("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ üòû", Severity.Error);
            }
        }
        finally
        {
            isLoading = false;
        }
    }
}