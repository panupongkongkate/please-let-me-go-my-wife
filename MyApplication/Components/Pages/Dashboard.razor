@page "/dashboard"
@using MyApplication.Models
@using MyApplication.Services
@inject AuthService AuthService
@inject RequestService RequestService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Dashboard - ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</PageTitle>

@if (!AuthService.IsAuthenticated)
{
    <MudAlert Severity="Severity.Warning" Class="mb-4">
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    </MudAlert>
    Navigation.NavigateTo("/login");
    return;
}

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Elevation="3" Class="pa-6" Style="background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);">
        <MudStack Spacing="4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudIcon Icon="@Icons.Material.Filled.Dashboard" Size="Size.Large" Color="Color.Primary" />
                    <MudText Typo="Typo.h4" Color="Color.Primary">
                        üìù ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
                    </MudText>
                </MudStack>
                
                <MudButton Variant="Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.Add"
                           Href="/request">
                    ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡∏°‡πà
                </MudButton>
            </MudStack>

            <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Info">
                <MudText>
                    ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö <strong>@AuthService.CurrentUser?.DisplayName</strong>! 
                    ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î üíï
                </MudText>
            </MudAlert>

            <!-- Search Bar -->
            <MudPaper Class="pa-4" Elevation="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                    <MudTextField @bind-Value="searchString"
                                  Placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠... (‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Immediate="true"
                                  DebounceInterval="300"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Style="flex: 1;" />
                    
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               StartIcon="@Icons.Material.Filled.Clear"
                               OnClick="@ClearSearch">
                        ‡∏•‡πâ‡∏≤‡∏á
                    </MudButton>
                    
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Info"
                               StartIcon="@Icons.Material.Filled.Refresh"
                               OnClick="@LoadUserRequests">
                        ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
                    </MudButton>
                </MudStack>
            </MudPaper>

            @if (isLoading)
            {
                <MudProgressCircular Indeterminate="true" Size="Size.Large" />
            }
            else if (requests.Any())
            {
                <MudTable @ref="mudTable"
                          Items="@FilteredRequests"
                          Hover="true"
                          Breakpoint="Breakpoint.Sm"
                          LoadingProgressColor="Color.Info"
                          SortLabel="‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°"
                          Dense="true">
                    
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</MudText>
                        <MudSpacer />
                        <MudText Typo="Typo.body2" Class="mr-4">
                            ‡πÅ‡∏™‡∏î‡∏á @FilteredRequests.Count() ‡∏à‡∏≤‡∏Å @requests.Count ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                        </MudText>
                    </ToolBarContent>
                    
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<RequestModel, object>(x => x.Date)">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RequestModel, object>(x => x.Time)">‡πÄ‡∏ß‡∏•‡∏≤</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RequestModel, object>(x => x.Place)">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RequestModel, object>(x => x.Reason)">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RequestModel, object>(x => x.Status)">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RequestModel, object>(x => x.CreatedDate)">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    
                    <RowTemplate>
                        <MudTd DataLabel="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                                @context.Date
                            </MudStack>
                        </MudTd>
                        <MudTd DataLabel="‡πÄ‡∏ß‡∏•‡∏≤">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" />
                                @context.Time
                            </MudStack>
                        </MudTd>
                        <MudTd DataLabel="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                @context.Place
                            </MudStack>
                        </MudTd>
                        <MudTd DataLabel="‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•">@context.Reason</MudTd>
                        <MudTd DataLabel="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞">
                            <MudChip Size="Size.Small" 
                                     Color="@GetStatusColor(context.Status)"
                                     Icon="@GetStatusIcon(context.Status)"
                                     T="string">
                                @context.Status
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠">
                            @context.CreatedDate.ToString("dd/MM/yyyy HH:mm")
                        </MudTd>
                    </RowTemplate>
                    
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{5, 10, 25, 50}" 
                                       HideRowsPerPage="false"
                                       HidePageNumber="false"
                                       InfoFormat="{first_item}-{last_item} ‡∏à‡∏≤‡∏Å {all_items}"
                                       RowsPerPageString="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤:" />
                    </PagerContent>
                </MudTable>
            }
            else
            {
                <MudPaper Class="pa-8" Elevation="0" Style="text-align: center; background-color: rgba(255,255,255,0.7);">
                    <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="Color.Surface" />
                    <MudText Typo="Typo.h6" Color="Color.Surface">
                        ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
                    </MudText>
                    <MudText Typo="Typo.body1" Color="Color.Surface">
                        ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡∏°‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
                    </MudText>
                </MudPaper>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private List<RequestModel> requests = new();
    private bool isLoading = true;
    private string searchString = "";
    private MudTable<RequestModel>? mudTable;

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadUserRequests();
    }

    private async Task LoadUserRequests()
    {
        isLoading = true;
        try
        {
            if (AuthService.CurrentUser != null)
            {
                requests = await RequestService.GetUserRequestsAsync(AuthService.CurrentUser.DisplayName);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<RequestModel> FilteredRequests
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return requests;

            return requests.Where(x => 
                x.Place.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                x.Reason.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                x.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                x.Date.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                x.Time.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            );
        }
    }

    private void ClearSearch()
    {
        searchString = "";
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "‡∏£‡∏≠" => Color.Warning,
            "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" => Color.Success,
            "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï" => Color.Error,
            _ => Color.Default
        };
    }

    private string GetStatusIcon(string status)
    {
        return status switch
        {
            "‡∏£‡∏≠" => Icons.Material.Filled.HourglassEmpty,
            "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" => Icons.Material.Filled.CheckCircle,
            "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï" => Icons.Material.Filled.Cancel,
            _ => Icons.Material.Filled.Help
        };
    }
}